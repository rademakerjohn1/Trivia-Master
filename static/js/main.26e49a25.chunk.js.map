{"version":3,"sources":["components/Header/Header.js","components/Button/Button.js","components/PageLink/PageLink.js","components/Menu/Menu.js","components/Question/Question.js","components/Answer/Answer.js","components/Timer/Timer.js","components/Scores/Scores.js","components/Form/Form.js","pages/Quiz.js","components/StatsTable/StatsTable.js","pages/Scoreboard.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","Button","className","onClick","text","PageLink","destination","message","href","Menu","start","end","setEasy","setMedium","setHard","Question","question","Answer","answer","Timer","seconds","Scores","correct","incorrect","Form","onSubmit","onChange","error","htmlFor","type","name","maxLength","Quiz","useState","JSON","parse","window","localStorage","getItem","stats","setStats","token","setToken","initials","setInitials","difficulty","setDifficulty","questions","setQuestions","setSeconds","setCorrect","setStart","setEnd","setError","setIncorrect","useEffect","setItem","stringify","sessionToken","level","a","axios","get","response","data","response_code","results","forEach","result","decode","answers","shuffle","incorrect_answers","correct_answer","i","length","validateToken","then","res","useLayoutEffect","timer","setTimeout","time","clearTimeout","wrong","q","slice","formatTime","arr","Date","now","toLocaleString","split","trim","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","html","document","createElement","innerHTML","value","map","index","key","userAnswer","event","target","handleChange","preventDefault","isNaN","userData","date","location","handleSave","StatsTable","stat","Scoreboard","easy","medium","hard","filter","removeItem","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.26e49a25.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css'\n\nfunction Header() {\n    return (\n        <h1 id=\"header\">Trivia Master</h1>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './Button.css'\n\nfunction Button({ className, onClick, text }) {\n    return (\n      <button className={className} onClick={onClick}>{text}</button>\n    )\n}\nexport default Button;","import React from 'react';\nimport './PageLink.css'\n\nfunction PageLink( {destination, message} ) {\n    return(\n        <div id=\"link-container\">\n        <a id=\"page-link\" href={destination}>{message}</a>\n        </div>\n    )\n}\n\nexport default PageLink;","import React from 'react'\nimport './Menu.css'\nimport Button from '../Button/Button'\nimport PageLink from '../PageLink/PageLink'\n\nfunction Menu({start, end, setEasy, setMedium, setHard}) {\n\n    return (\n        (!start && !end) &&\n        <div id=\"menu\">\n            <div id=\"difficulty-btn-container\">\n                <p>Select a difficulty</p>\n                <Button className=\"difficulty-btn\" onClick={setEasy} text=\"Easy\" />\n                <Button className=\"difficulty-btn\" onClick={setMedium} text=\"Medium\" />\n                <Button className=\"difficulty-btn\" onClick={setHard} text=\"Hard\" />\n            </div>\n            <PageLink destination=\"#/scores\" message={\"See scores\"} />\n        </div>\n    )\n}\n\nexport default Menu;","import React from 'react'\nimport './Question.css'\n\nfunction Question({ question }) {\n    return <p id=\"question\">{question}</p>\n  }\n\nexport default Question;","import React from 'react'\nimport './Answer.css'\n\nfunction Answer({ answer, onClick }) {\n    return <li className=\"answer\" onClick={onClick}>{answer}</li>\n  }\n\nexport default Answer;","import React from 'react'\nimport './Timer.css'\n\nfunction Timer({ start, seconds }) {\n\n    return start && <p id=\"timer\">{seconds}</p>\n}\n\nexport default Timer;","import React from 'react';\nimport './Scores.css'\n\nfunction Scores({ start, end, correct, incorrect }) {\n    return (\n        (start || end) &&\n        <div id=\"score-container\">\n            <p id=\"correct\">Correct: <span className=\"score-text\">{correct}</span></p>\n            <p id=\"incorrect\">Incorrect: <span className=\"score-text\">{incorrect}</span></p>\n        </div>\n    )\n}\n\nexport default Scores;","import React from 'react'\nimport './Form.css'\n\nfunction Form({ end, onSubmit, onChange, error }) {\n    return (\n        end && \n        <form onSubmit={onSubmit}>\n            <label htmlFor=\"initials\">Enter your initials</label><br />\n            <input type=\"text\" name=\"initials\" onChange={onChange} maxLength=\"3\" />\n            <button type=\"submit\">Submit</button>\n            {error && <p id=\"error\">{error}</p>}\n        </form>\n    )\n}\n\nexport default Form;","import React, { useState, useLayoutEffect, useEffect } from 'react';\nimport './Quiz.css'\nimport axios from 'axios'\nimport Menu from  '../components/Menu/Menu'\nimport Question from '../components/Question/Question'\nimport Answer from '../components/Answer/Answer';\nimport Timer from '../components/Timer/Timer';\nimport Scores from '../components/Scores/Scores';\nimport Form from '../components/Form/Form'\n\nfunction Quiz() {\n    // State for trivia questions, timer, right/wrong count\n    const [stats, setStats] = useState(JSON.parse(window.localStorage.getItem('stats')) || [])\n    const [token, setToken] = useState(window.localStorage.getItem('token') || '')\n    const [initials, setInitials] = useState('')\n    const [difficulty, setDifficulty] = useState('')\n    const [questions, setQuestions] = useState([])\n    const [seconds, setSeconds] = useState();\n    const [correct, setCorrect] = useState(0);\n    const [start, setStart] = useState(false)\n    const [end, setEnd] = useState(false)\n    const [error, setError] = useState('')\n    const [incorrect, setIncorrect] = useState(0);\n\n    // When stats state is updated, save to localStorage\n    useEffect(() => {\n        window.localStorage.setItem('stats', JSON.stringify(stats))\n    }, [stats])\n\n\n    useEffect(() => {\n\n        window.localStorage.setItem('token', token)\n\n        // If no token, set error to request token\n        if (!token) setError(\"new token needed\")\n\n        // If token and difficulty exist in state, validate token\n        if (token !== '' && difficulty !== '') {\n            validateToken(token, difficulty)\n        }\n\n        // If token is valid, format question sets and start quiz, else request token\n        async function validateToken(sessionToken, level) {\n            \n            const response = await axios.get(`https://opentdb.com/api.php?token=${sessionToken}&amount=10&category=9&difficulty=${level}&type=multiple`)\n            if (response.data.response_code === 4 || response.data.response_code === 3) {\n                setError(\"new token needed\")\n            } \n            else {\n                response.data.results.forEach(result => {\n                    result.question = decode(result.question)\n                    result.answers = shuffle([...result.incorrect_answers, result.correct_answer])\n                    for (var i = 0; i < result.answers.length; i++) {\n                        result.answers[i] = decode(result.answers[i])\n                    }\n                })\n                setSeconds(10)\n                setQuestions(response.data.results)\n                setStart(true)\n            }\n        }\n    }, [token, difficulty])\n\n    // If new token is needed, request new token and set to state \n    useEffect(() => {\n        if (error === \"new token needed\") {\n            axios.get(\"https://opentdb.com/api_token.php?command=request\")\n                .then(res => setToken(res.data.token)).then(setError(''))\n        }\n    }, [error])\n\n\n    // If questions in state, decrement timer each second\n    useLayoutEffect(() => {\n        if (!questions.length) return;\n        const timer = setTimeout(() => {\n            setSeconds(time => time - 1);\n        }, 1000);\n        return () => clearTimeout(timer);\n    });\n\n    // If user answer matches correct_answer, increment correct, else increment incorrect. Remove current question, reset timer\n    const userAnswer = (index) => {\n        if (questions[0].answers[index] === questions[0].correct_answer) setCorrect(correct => correct + 1)\n        else setIncorrect(incorrect => incorrect + 1)\n        setQuestions(q => q.slice(1));\n        setSeconds(10);\n    }\n\n    // If questions left and time is 0, increment incorrect count, remove current question, reset timer\n    // If correct or incorrect is non-zero AND no questions left, end quiz\n    useEffect(() => {\n        if (questions.length && seconds < 1) {\n            setIncorrect(wrong => wrong + 1)\n            setQuestions(q => q.slice(1));\n            setSeconds(10);\n        }\n        if ((correct || incorrect) && !questions.length) {\n            setStart(false)\n            setEnd(true)\n        }\n    }, [correct, incorrect, questions, seconds])\n\n\n    // Set input value to state\n    const handleChange = (event) => {\n        setInitials(event.target.value)\n    }\n\n    // Save user initials and score to storage state, show error if no input value or input !isNaN\n    const handleSave = (event) => {\n        event.preventDefault()\n        if (!isNaN(initials) || !initials) {\n            setError(\"Please enter at least one initial\")\n            return;\n        }\n        let userData = {\n            initials, difficulty, incorrect, correct,\n            date: new Date(Date.now()).toLocaleString().split(\",\")[0],\n            time: formatTime()\n        }\n        setStats(data => [...data, userData])\n        window.location = \"#/scores\";\n    }\n    // Format time\n    const formatTime = () => {\n        let time = new Date(Date.now()).toLocaleString().split(\",\")[1].trim();\n        let arr = time.split(\":\")\n        return `${arr[0]}:${arr[1]} ${arr[2].slice(3)}`;\n    }\n\n    // Randomize array order\n    const shuffle = (array) => {\n        var currentIndex = array.length, temporaryValue, randomIndex;\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            // And swap it with the current element.\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n        return array;\n    }\n\n    // Convert special character codes from questions and answers to text\n    function decode(html) {\n        var text = document.createElement(\"textarea\");\n        text.innerHTML = html;\n        return text.value;\n    }\n\n    return (\n        <div>\n            <Menu start={start} end={end} \n            setEasy={() => setDifficulty(\"easy\")} \n            setMedium={() => setDifficulty(\"medium\")} \n            setHard={() => setDifficulty(\"hard\")} />\n\n            <Timer start={start} seconds={seconds} />\n\n            {questions.length > 0 &&\n            <div id=\"question-answer-container\">\n                <Question question={questions[0].question} />\n                <div id=\"answer-container\">\n                    <ol type=\"A\">\n                        {questions[0].answers.map((answer, index) => (\n                            <Answer key={index} answer={answer} onClick={() => userAnswer(index)}/>))}\n                    </ol>\n                </div>\n            </div>\n            }   \n\n            <Scores start={start} end={end} correct={correct} incorrect={incorrect} />\n\n            <Form end={end} error={error} \n            onChange={(event) => handleChange(event)} \n            onSubmit={(event) => handleSave(event)}/>\n        </div>\n    )\n}\n\nexport default Quiz;","import React from 'react';\nimport './StatsTable.css'\n\nfunction StatsTable({ stats, difficulty }) {\n\n    return (\n      <div className=\"table-container\">\n        <table>\n          <caption>{difficulty}</caption>\n        <thead>\n          <tr>\n            <th>User</th>\n            <th>Score</th>\n            <th>Date</th>\n            <th>Time</th>\n          </tr>\n        </thead>\n        <tbody>\n            {stats.map((stat, index) => (\n                <tr key={index}>\n                    <td>{stat.initials}</td>\n                    <td>{(stat.correct / (stat.correct + stat.incorrect)) * 100}%</td>\n                    <td>{stat.date}</td>\n                    <td>{stat.time}</td>\n                </tr>\n            ))}\n        </tbody>\n      </table>\n      </div>\n    )\n}\n\nexport default StatsTable;","import React, { useState, useEffect } from 'react';\nimport './Scoreboard.css'\nimport StatsTable from '../components/StatsTable/StatsTable';\nimport PageLink from '../components/PageLink/PageLink'\nimport Button from '../components/Button/Button'\n\n\nfunction Scoreboard() {\n\n    const [stats, setStats] = useState(JSON.parse(window.localStorage.getItem('stats')) || []);\n    const [easy, setEasy] = useState([]);\n    const [medium, setMedium] = useState([]);\n    const [hard, setHard] = useState([]);\n\n    useEffect(() => {\n        setEasy(stats.filter(stat => stat.difficulty === \"easy\"))\n        setMedium(stats.filter(stat => stat.difficulty === \"medium\"))\n        setHard(stats.filter(stat => stat.difficulty === \"hard\"))\n    }, [stats])\n\n    const clear = () => {\n        setStats([])\n        localStorage.removeItem(\"stats\");\n    }\n\n    return (\n        stats.length > 0 ?\n            <div id=\"stats-container\">\n                {easy.length > 0 &&\n                    <StatsTable difficulty={\"Easy\"} stats={easy} />\n                }\n                {medium.length > 0 &&\n                    <StatsTable difficulty={\"Medium\"} stats={medium} />\n                }\n                {hard.length > 0 &&\n                    <StatsTable difficulty={\"Hard\"} stats={hard} />\n                }\n                <Button className=\"clear-btn\" onClick={() => clear()} text=\"Clear\" />\n                <PageLink destination=\"#/\" message={\"Back\"} />\n            </div>\n            : <div id=\"stats-container\">\n                <p>No stats available.</p>\n                <PageLink destination=\"#/\" message={\"Play a quiz now!\"} />\n            </div>\n            \n\n    )\n}\n\nexport default Scoreboard;","import React from 'react';\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport Header from './components/Header/Header'\nimport Quiz from './pages/Quiz'\nimport Scoreboard from './pages/Scoreboard'\n\n\nfunction App() {\n\n  return (\n      <HashRouter>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={Quiz} />\n          <Route exact path=\"/scores\" component={Scoreboard} />\n        </Switch>\n      </HashRouter>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}