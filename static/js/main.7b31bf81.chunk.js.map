{"version":3,"sources":["components/Header/Header.js","components/Button/Button.js","components/PageLink/PageLink.js","components/Question/Question.js","components/Answer/Answer.js","components/Timer/Timer.js","components/Scores/Scores.js","components/Form/Form.js","pages/Quiz.js","components/StatsTable/StatsTable.js","pages/Scoreboard.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","Button","onClick","difficulty","className","PageLink","destination","message","href","Question","question","Answer","answer","Timer","seconds","Scores","correct","incorrect","Form","onSubmit","onChange","error","htmlFor","type","name","maxLength","Quiz","useState","JSON","parse","window","localStorage","getItem","stats","setStats","initials","setInitials","setDifficulty","questions","setQuestions","setSeconds","setCorrect","start","setStart","end","setEnd","setError","setIncorrect","useEffect","setItem","stringify","startQuiz","level","a","axios","get","token","data","getQuestions","sessionToken","trivia","results","forEach","result","answers","shuffle","incorrect_answers","correct_answer","useLayoutEffect","length","timer","setTimeout","time","clearTimeout","wrong","q","slice","formatTime","arr","Date","now","toLocaleString","split","trim","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","map","index","key","userAnswer","event","target","value","handleChange","preventDefault","isNaN","userData","date","location","handleSave","StatsTable","stat","Scoreboard","clear","App","exact","path","component","process","PUBLIC","URL","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.7b31bf81.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css'\n\nfunction Header() {\n    return (\n        <h1 id=\"header\">TriviaMaster</h1>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './Button.css'\n\nfunction Button({ onClick, difficulty }) {\n    return (\n      <button className=\"difficulty-btn\" onClick={onClick}>{difficulty}</button>\n    )\n}\nexport default Button;","import React from 'react';\nimport './PageLink.css'\n\nfunction PageLink( {destination, message} ) {\n    return(\n        <a className=\"page-link\" href={destination}>{message}</a>\n    )\n}\n\nexport default PageLink;","import React from 'react'\nimport './Question.css'\n\nfunction Question({ question }) {\n    return <p id=\"question\">{question}</p>\n  }\n\nexport default Question;","import React from 'react'\nimport './Answer.css'\n\nfunction Answer({ answer, onClick }) {\n    return <li className=\"answer\" onClick={onClick}>{answer}</li>\n  }\n\nexport default Answer;","import React from 'react'\nimport './Timer.css'\n\nfunction Timer({ seconds }) {\n    return <p id=\"timer\">{seconds}</p>\n}\n\nexport default Timer;","import React from 'react';\nimport './Scores.css'\n\nfunction Scores({ correct, incorrect }) {\n    return (\n        <div id=\"score-container\">\n            <p id=\"correct\">Correct: {correct}</p>\n            <p id=\"incorrect\">Incorrect: {incorrect}</p>\n        </div>\n    )\n}\n\nexport default Scores;","import React from 'react'\n\nfunction Form({ onSubmit, onChange, error }) {\n    return ( \n        <form onSubmit={onSubmit}>\n            <label htmlFor=\"initials\">Enter your initials</label><br />\n            <input type=\"text\" name=\"initials\" onChange={onChange} maxLength=\"3\" />\n            <button type=\"submit\">Submit</button>\n            {error && <p>{error}</p>}\n        </form>\n    )\n}\n\nexport default Form;","import React, { useState, useLayoutEffect, useEffect } from 'react';\nimport './Quiz.css'\nimport axios from 'axios'\nimport Button from '../components/Button/Button'\nimport PageLink from '../components/PageLink/PageLink'\nimport Question from '../components/Question/Question'\nimport Answer from '../components/Answer/Answer';\nimport Timer from '../components/Timer/Timer';\nimport Scores from '../components/Scores/Scores';\nimport Form from '../components/Form/Form'\n\nfunction Quiz() {\n    // State for trivia questions, timer, right/wrong count\n    const [stats, setStats] = useState(JSON.parse(window.localStorage.getItem('stats')) || [])\n    const [initials, setInitials] = useState('')\n    const [difficulty, setDifficulty] = useState('')\n    const [questions, setQuestions] = useState([])\n    const [seconds, setSeconds] = useState();\n    const [correct, setCorrect] = useState(0);\n    const [start, setStart] = useState(false)\n    const [end, setEnd] = useState(false)\n    const [error, setError] = useState('')\n    const [incorrect, setIncorrect] = useState(0);\n\n    // When stats state is updated, save to localStorage\n    useEffect(() => {\n        window.localStorage.setItem('stats', JSON.stringify(stats))\n    }, [stats])\n\n    // Get token, get questions and set timer and score\n    const startQuiz = async (level) => {\n        let token = await axios.get(\"https://opentdb.com/api_token.php?command=request\")\n        token = token.data.token;\n        const data = await getQuestions(token);\n        setDifficulty(level)\n        setSeconds(10)\n        setQuestions(data)\n        setStart(true)\n    }\n\n    // Get data from API, combine and shuffle right/wrong answers\n    const getQuestions = async (sessionToken) => {\n        let trivia = await axios.get(`https://opentdb.com/api.php?token=${sessionToken}&amount=10&category=9&difficulty=${difficulty}&type=multiple`)\n        trivia = trivia.data.results\n        trivia.forEach(result => {\n            result.answers = shuffle([...result.incorrect_answers, result.correct_answer])\n        })\n        return trivia;\n    }\n\n    // If there are questions in state, setTimeOut decrements timer each second\n    useLayoutEffect(() => {\n        if (!questions.length) return;\n        const timer = setTimeout(() => {\n            setSeconds(time => time - 1);\n        }, 1000);\n        return () => clearTimeout(timer);\n    });\n\n    // If user answer matches questions.correct_answer, increment correct, else increment incorrect\n    // Remove current question from array, reset timer\n    const userAnswer = (index) => {\n        if (questions[0].answers[index] === questions[0].correct_answer) setCorrect(correct => correct + 1)\n        else setIncorrect(incorrect => incorrect + 1)\n        setQuestions(q => q.slice(1));\n        setSeconds(10);\n    }\n\n    // If questions left and time reaches 0, increment incorrect count, remove current question, reset timer\n    // If correct or incorrect is non-zero AND no questions left, end quiz\n    useEffect(() => {\n        if (questions.length && seconds < 1) {\n            setIncorrect(wrong => wrong + 1)\n            setQuestions(q => q.slice(1));\n            setSeconds(10);\n        }\n        if ((correct || incorrect) && !questions.length) {\n            setStart(false)\n            setEnd(true)\n        }\n    }, [correct, incorrect, questions, seconds])\n\n\n    // Set input value to state\n    const handleChange = (event) => {\n        setInitials(event.target.value)\n    }\n\n    // Save user initials and score to storage state, show error if no input value or input !isNaN\n    const handleSave = (event) => {\n        event.preventDefault()\n        if (!isNaN(initials) || !initials) {\n            setError(\"Please enter at least one initial\")\n            return;\n        }\n        let userData = {\n            initials: initials,\n            difficulty: difficulty,\n            incorrect: incorrect,\n            correct: correct,\n            date: new Date(Date.now()).toLocaleString().split(\",\")[0],\n            time: formatTime()\n        }\n        setStats(data => [...data, userData])\n        setError(\"\")\n        window.location = \"/scores\"\n    }\n\n    const formatTime = () => {\n        let time = new Date(Date.now()).toLocaleString().split(\",\")[1].trim();\n        let arr = time.split(\":\")\n        return `${arr[0]}:${arr[1]} ${arr[2].slice(3)}`;\n    }\n\n    // Randomize array order\n    const shuffle = (array) => {\n\n        var currentIndex = array.length, temporaryValue, randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n        return array;\n    }\n\n    return (\n        <div>\n            {/* If quiz not started, render buttons */}\n            {(!start && !end) &&\n                <div id=\"menu\">\n                    <div id=\"difficulty-btn-container\">\n                        <p>Select a difficulty</p>\n                        <Button onClick={() => startQuiz(\"easy\")} difficulty=\"Easy\" />\n                        <Button onClick={() => startQuiz(\"medium\")} difficulty=\"Medium\" />\n                        <Button onClick={() => startQuiz(\"hard\")} difficulty=\"Hard\" />\n                    </div>\n                    <PageLink destination=\"/scores\" message={\"See scores\"} />\n                </div>\n            }\n\n            {/* If quiz started, show timer */}\n            {start &&\n                <Timer seconds={seconds} />\n            }\n\n\n            {/* If questions in state render question/answers */}\n            {questions.length > 0 &&\n                <div id=\"question-answer-container\">\n                    <Question question={questions[0].question} />\n                    <div id=\"answer-container\">\n                        <ol type=\"A\">\n                            {questions[0].answers.map((answer, index) => (\n                                <Answer\n                                    key={index}\n                                    answer={answer}\n                                    onClick={() => userAnswer(index)}\n                                />))\n                            }\n                        </ol>\n                    </div>\n                </div>\n            }\n\n            {/* If quiz started or ended, show scores */}\n            {(start || end) &&\n                <Scores correct={correct} incorrect={incorrect} />\n            }\n\n            {/* If quiz ended, show form */}\n            {end &&\n                <Form\n                    end={end}\n                    error={error}\n                    onChange={(event) => handleChange(event)}\n                    onSubmit={(event) => handleSave(event)}\n                />\n            }\n        </div>\n\n    )\n}\n\nexport default Quiz;","import React from 'react';\n\nfunction StatsTable({ stats, onClick }) {\n\n    return (\n      <div>\n        <table>\n        <thead>\n          <tr>\n            <th>Initials</th>\n            <th>Difficulty</th>\n            <th>Score</th>\n            <th>Date</th>\n            <th>Time</th>\n          </tr>\n        </thead>\n        <tbody>\n            {stats.map(stat => (\n                <tr>\n                    <td>{stat.initials}</td>\n                    <td>{stat.difficulty}</td>\n                    <td>{(stat.correct / (stat.correct + stat.incorrect)) * 100}%</td>\n                    <td>{stat.date}</td>\n                    <td>{stat.time}</td>\n                </tr>\n            ))}\n        </tbody>\n      </table>\n      <a href=\"/\">Back</a>\n      <button onClick={onClick}>Clear</button>\n      </div>\n    )\n}\n\nexport default StatsTable;","import React, { useState } from 'react';\nimport StatsTable from '../components/StatsTable/StatsTable'\n\n\nfunction Scoreboard() {\n\n    const [stats, setStats] = useState(JSON.parse(window.localStorage.getItem('stats')) || [])\n\n    const clear = () => {\n        setStats([])\n        localStorage.clear();\n    }\n    \n    return (\n        stats.length > 0 ? \n        <StatsTable stats={stats} onClick={() => clear()} />\n        : <p>No stats available. <span><a href=\"/\">Play a quiz now!</a></span></p>\n    )\n}\nexport default Scoreboard;","import React from 'react';\nimport { Route, Switch } from \"react-router-dom\";\nimport Header from './components/Header/Header'\nimport Quiz from './pages/Quiz'\nimport Scoreboard from './pages/Scoreboard'\n\n\nfunction App() {\n\n  return (\n    <div>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={Quiz} />\n        <Route path={process.env.PUBLIC.URL + \"/scores\"} component={Scoreboard} />\n      </Switch>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { HashRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}